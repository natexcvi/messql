name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  typecheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run typecheck
        run: npm run typecheck

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: ghusta/postgres-world-db:2.11
        env:
          POSTGRES_DB: world-db
          POSTGRES_USER: world
          POSTGRES_PASSWORD: world123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run build
        run: npm run build

      - name: Check database connection
        run: |
          echo "Testing database connection..."
          npx tsx -e "
          const { Client } = require('pg');
          const client = new Client({
            host: '127.0.0.1',
            port: 5432,
            user: 'world',
            password: 'world123',
            database: 'world-db'
          });
          client.connect()
            .then(() => {
              console.log('✅ Successfully connected to test database');
              return client.query('SELECT COUNT(*) FROM city');
            })
            .then(result => {
              console.log('✅ Database has data:', result.rows[0].count, 'cities');
              return client.end();
            })
            .then(() => process.exit(0))
            .catch(err => {
              console.error('❌ Database connection failed:', err.message);
              process.exit(1);
            });
          "
        env:
          TEST_DB_HOST: 127.0.0.1
          TEST_DB_PORT: 5432
          TEST_DB_USER: world
          TEST_DB_PASS: world123
          TEST_DB_NAME: world-db

      - name: Run tests
        run: xvfb-run -a npm run test
        env:
          TEST_DB_HOST: 127.0.0.1
          TEST_DB_PORT: 5432
          TEST_DB_USER: world
          TEST_DB_PASS: world123
          TEST_DB_NAME: world-db
          PLAYWRIGHT_BROWSERS_PATH: /usr/local/bin/playwright-browsers
          CI: "true"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30
